/**
 * Site Check Tool JavaScript
 * –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–æ–≤ –¥–ª—è StormHosting UA
 */

class SiteChecker {
    constructor() {
        this.form = document.getElementById('siteCheckForm');
        this.urlInput = document.getElementById('siteUrl');
        this.submitBtn = document.querySelector('.btn-check');
        this.loadingDiv = document.querySelector('.loading');
        this.resultsSection = document.getElementById('resultsSection');
        this.resultsContainer = document.getElementById('resultsContainer');
        
        this.locations = [
            { code: 'kyiv', name: '–ö–∏—ó–≤, –£–∫—Ä–∞—ó–Ω–∞', flag: 'üá∫üá¶' },
            { code: 'frankfurt', name: '–§—Ä–∞–Ω–∫—Ñ—É—Ä—Ç, –ù—ñ–º–µ—á—á–∏–Ω–∞', flag: 'üá©üá™' },
            { code: 'london', name: '–õ–æ–Ω–¥–æ–Ω, –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω—ñ—è', flag: 'üá¨üáß' },
            { code: 'nyc', name: '–ù—å—é-–ô–æ—Ä–∫, –°–®–ê', flag: 'üá∫üá∏' },
            { code: 'singapore', name: '–°—ñ–Ω–≥–∞–ø—É—Ä', flag: 'üá∏üá¨' },
            { code: 'tokyo', name: '–¢–æ–∫—ñ–æ, –Ø–ø–æ–Ω—ñ—è', flag: 'üáØüáµ' }
        ];
        
        this.init();
    }
    
    init() {
        this.createLocationSelector();
        this.bindEvents();
        this.setupFormValidation();
    }
    
    createLocationSelector() {
        const form = this.form;
        const locationSection = document.createElement('div');
        locationSection.className = 'location-select';
        locationSection.innerHTML = `
            <label class="form-label">–û–±–µ—Ä—ñ—Ç—å –ª–æ–∫–∞—Ü—ñ—ó –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:</label>
            <div class="location-grid" id="locationGrid"></div>
        `;
        
        // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –ø–æ–ª—è URL
        const urlGroup = form.querySelector('.input-group');
        urlGroup.parentNode.insertBefore(locationSection, urlGroup.nextSibling);
        
        const grid = document.getElementById('locationGrid');
        
        this.locations.forEach((location, index) => {
            const item = document.createElement('div');
            item.className = 'location-item';
            
            item.innerHTML = `
                <input type="checkbox" 
                       id="location_${location.code}" 
                       name="locations[]" 
                       value="${location.code}"
                       class="location-checkbox"
                       ${index < 3 ? 'checked' : ''}>
                <label for="location_${location.code}" class="location-label">
                    <span class="location-flag">${location.flag}</span>
                    <span class="location-name">${location.name}</span>
                </label>
            `;
            
            grid.appendChild(item);
        });
    }
    
    bindEvents() {
        if (this.form) {
            this.form.addEventListener('submit', (e) => this.handleSubmit(e));
        }
        
        if (this.urlInput) {
            this.urlInput.addEventListener('input', () => this.validateUrl());
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–π
        document.addEventListener('change', (e) => {
            if (e.target.classList.contains('location-checkbox')) {
                this.updateLocationSelection();
            }
        });
        
        // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ API
        document.addEventListener('click', (e) => {
            if (e.target.closest('[onclick="copyCode()"]')) {
                this.copyApiCode();
            }
        });
    }
    
    setupFormValidation() {
        if (this.urlInput) {
            this.urlInput.addEventListener('blur', () => {
                this.validateUrl();
            });
        }
    }
    
    validateUrl() {
        const url = this.urlInput.value.trim();
        const urlPattern = /^https?:\/\/.+/i;
        
        this.urlInput.classList.remove('is-invalid', 'is-valid');
        
        if (url) {
            if (urlPattern.test(url)) {
                this.urlInput.classList.add('is-valid');
                return true;
            } else {
                this.urlInput.classList.add('is-invalid');
                this.showError('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π URL (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: https://example.com)');
                return false;
            }
        }
        return false;
    }
    
    updateLocationSelection() {
        const checkedBoxes = document.querySelectorAll('.location-checkbox:checked');
        const submitBtn = this.submitBtn;
        
        if (checkedBoxes.length === 0) {
            this.disableSubmit('–û–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–Ω—É –ª–æ–∫–∞—Ü—ñ—é');
        } else if (checkedBoxes.length > 4) {
            // –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–µ–∫–±–æ–∫—Å
            const lastChecked = Array.from(checkedBoxes).pop();
            lastChecked.checked = false;
            this.showWarning('–ú–∞–∫—Å–∏–º—É–º 4 –ª–æ–∫–∞—Ü—ñ—ó –æ–¥–Ω–æ—á–∞—Å–Ω–æ');
        } else {
            this.enableSubmit();
        }
    }
    
    async handleSubmit(e) {
        e.preventDefault();
        
        if (!this.validateUrl()) {
            return;
        }
        
        const selectedLocations = Array.from(document.querySelectorAll('.location-checkbox:checked'))
            .map(cb => cb.value);
            
        if (selectedLocations.length === 0) {
            this.showError('–û–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–Ω—É –ª–æ–∫–∞—Ü—ñ—é –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏');
            return;
        }
        
        const url = this.urlInput.value.trim();
        
        try {
            this.showLoading();
            const results = await this.performSiteCheck(url, selectedLocations);
            this.displayResults(results);
        } catch (error) {
            this.showError('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: ' + error.message);
        } finally {
            this.hideLoading();
        }
    }
    
    async performSiteCheck(url, locations) {
        const formData = new FormData();
        formData.append('url', url);
        formData.append('locations', JSON.stringify(locations));
        
        // –î–æ–±–∞–≤–ª—è–µ–º CSRF —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (window.csrfToken) {
            formData.append('csrf_token', window.csrfToken);
        }
        
        try {
            const response = await fetch('/api/tools/site-check.php', {
                method: 'POST',
                body: formData,
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            });
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            const responseText = await response.text();
            
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å JSON
            let data;
            try {
                data = JSON.parse(responseText);
            } catch (jsonError) {
                console.error('Invalid JSON response:', responseText);
                throw new Error('–°–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å');
            }
            
            if (!response.ok) {
                throw new Error(data.error || `HTTP ${response.status}: ${response.statusText}`);
            }
            
            if (data.error) {
                throw new Error(data.error);
            }
            
            return data;
            
        } catch (fetchError) {
            console.error('Fetch error:', fetchError);
            throw fetchError;
        }
    }
    
    displayResults(data) {
        if (!this.resultsContainer) {
            this.createResultsContainer();
        }
        
        this.resultsContainer.innerHTML = '';
        
        // –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∞–π—Ç–µ
        const generalCard = this.createGeneralInfoCard(data.general);
        this.resultsContainer.appendChild(generalCard);
        
        // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –ª–æ–∫–∞—Ü–∏—è–º
        if (data.locations && data.locations.length > 0) {
            data.locations.forEach((locationData, index) => {
                const locationCard = this.createLocationCard(locationData, index);
                this.resultsContainer.appendChild(locationCard);
            });
        }
        
        // SSL –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if (data.ssl) {
            const sslCard = this.createSSLCard(data.ssl);
            this.resultsContainer.appendChild(sslCard);
        }
        
        // HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if (data.headers) {
            const headersCard = this.createHeadersCard(data.headers);
            this.resultsContainer.appendChild(headersCard);
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        this.showResults();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞
        this.createResponseTimeChart(data.locations);
    }
    
    createGeneralInfoCard(general) {
        const statusClass = this.getStatusClass(general.status_code);
        
        const card = document.createElement('div');
        card.className = 'result-card';
        card.style.animationDelay = '0ms';
        
        card.innerHTML = `
            <div class="result-header">
                <h3 class="result-title">–ó–∞–≥–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</h3>
                <span class="result-status status-${statusClass}">
                    ${general.status_code || 'N/A'}
                </span>
            </div>
            <div class="result-details">
                <div class="detail-item">
                    <span class="detail-label">URL:</span>
                    <span class="detail-value">${general.url}</span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">IP –∞–¥—Ä–µ—Å–∞:</span>
                    <span class="detail-value">${general.ip || '–ù–µ–≤—ñ–¥–æ–º–∞'}</span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">–°–µ—Ä–≤–µ—Ä:</span>
                    <span class="detail-value">${general.server || '–ù–µ–≤—ñ–¥–æ–º–∏–π'}</span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">–†–æ–∑–º—ñ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç—É:</span>
                    <span class="detail-value">${this.formatBytes(general.content_length)}</span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É:</span>
                    <span class="detail-value">${general.content_type || 'text/html'}</span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">–ß–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:</span>
                    <span class="detail-value">${this.formatDateTime(general.check_time)}</span>
                </div>
            </div>
        `;
        
        return card;
    }
    
    createLocationCard(locationData, index) {
        const location = this.locations.find(l => l.code === locationData.location);
        const statusClass = this.getStatusClass(locationData.status_code);
        const responseClass = this.getResponseTimeClass(locationData.response_time);
        
        const card = document.createElement('div');
        card.className = 'result-card';
        card.style.animationDelay = `${(index + 1) * 150}ms`;
        
        card.innerHTML = `
            <div class="result-header">
                <h3 class="result-title">
                    ${location ? location.flag + ' ' + location.name : locationData.location}
                </h3>
                <span class="result-status status-${statusClass}">
                    ${locationData.status_code || '–ü–æ–º–∏–ª–∫–∞'}
                </span>
            </div>
            <div class="result-details">
                <div class="detail-item">
                    <span class="detail-label">–ß–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:</span>
                    <span class="detail-value ${responseClass}">
                        ${locationData.response_time ? locationData.response_time + ' –º—Å' : '–¢–∞–π–º-–∞—É—Ç'}
                    </span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">–°—Ç–∞—Ç—É—Å:</span>
                    <span class="detail-value">${locationData.status_text || '–ù–µ–≤—ñ–¥–æ–º–∏–π'}</span>
                </div>
                ${locationData.error ? `
                <div class="detail-item">
                    <span class="detail-label">–ü–æ–º–∏–ª–∫–∞:</span>
                    <span class="detail-value error">${locationData.error}</span>
                </div>
                ` : ''}
                <div class="detail-item">
                    <span class="detail-label">DNS —á–∞—Å:</span>
                    <span class="detail-value">${locationData.dns_time || 0} –º—Å</span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">–ß–∞—Å –∑'—î–¥–Ω–∞–Ω–Ω—è:</span>
                    <span class="detail-value">${locationData.connect_time || 0} –º—Å</span>
                </div>
            </div>
        `;
        
        return card;
    }
    
    createSSLCard(sslData) {
        const sslClass = sslData.valid ? 'ssl-info' : 'ssl-expired';
        const expiryClass = this.getSSLExpiryClass(sslData.days_until_expiry);
        
        const card = document.createElement('div');
        card.className = 'result-card';
        
        card.innerHTML = `
            <div class="result-header">
                <h3 class="result-title">SSL –°–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç</h3>
                <span class="result-status ${sslData.valid ? 'status-success' : 'status-error'}">
                    ${sslData.valid ? '–î—ñ–π—Å–Ω–∏–π' : '–ù–µ–¥—ñ–π—Å–Ω–∏–π'}
                </span>
            </div>
            <div class="${sslClass}">
                <div class="result-details">
                    <div class="detail-item">
                        <span class="detail-label">–ï–º—ñ—Ç–µ–Ω—Ç:</span>
                        <span class="detail-value">${sslData.issuer || '–ù–µ–≤—ñ–¥–æ–º–∏–π'}</span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">–í–∏–¥–∞–Ω–∏–π:</span>
                        <span class="detail-value">${this.formatDate(sslData.valid_from)}</span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">–î—ñ—î –¥–æ:</span>
                        <span class="detail-value ${expiryClass}">
                            ${this.formatDate(sslData.valid_to)}
                        </span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">–î–Ω—ñ–≤ –¥–æ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è:</span>
                        <span class="detail-value ${expiryClass}">
                            ${sslData.days_until_expiry} –¥–Ω—ñ–≤
                        </span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ —ñ–º–µ–Ω–∞:</span>
                        <span class="detail-value">${sslData.alt_names ? sslData.alt_names.join(', ') : '–ù–µ–º–∞—î'}</span>
                    </div>
                </div>
            </div>
        `;
        
        return card;
    }
    
    createHeadersCard(headers) {
        const card = document.createElement('div');
        card.className = 'result-card';
        
        const headersHtml = Object.entries(headers)
            .map(([key, value]) => `
                <tr>
                    <td>${this.escapeHtml(key)}</td>
                    <td>${this.escapeHtml(value)}</td>
                </tr>
            `).join('');
        
        card.innerHTML = `
            <div class="result-header">
                <h3 class="result-title">HTTP –ó–∞–≥–æ–ª–æ–≤–∫–∏</h3>
                <span class="result-status status-success">
                    ${Object.keys(headers).length} –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
                </span>
            </div>
            <div class="table-responsive">
                <table class="headers-table">
                    <thead>
                        <tr>
                            <th>–ó–∞–≥–æ–ª–æ–≤–æ–∫</th>
                            <th>–ó–Ω–∞—á–µ–Ω–Ω—è</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${headersHtml}
                    </tbody>
                </table>
            </div>
        `;
        
        return card;
    }
    
    createResponseTimeChart(locations) {
        const chartContainer = document.createElement('div');
        chartContainer.className = 'result-card';
        chartContainer.innerHTML = `
            <div class="result-header">
                <h3 class="result-title">–ì—Ä–∞—Ñ—ñ–∫ —á–∞—Å—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ</h3>
            </div>
            <div class="response-chart">
                <canvas id="responseChart" width="400" height="200"></canvas>
            </div>
        `;
        
        this.resultsContainer.appendChild(chartContainer);
        
        // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å Chart.js –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if (typeof Chart !== 'undefined') {
            this.renderChart(locations);
        } else {
            // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫
            this.renderSimpleChart(locations);
        }
    }
    
    renderChart(locations) {
        const ctx = document.getElementById('responseChart');
        if (!ctx) return;
        
        const labels = locations.map(loc => {
            const location = this.locations.find(l => l.code === loc.location);
            return location ? location.name : loc.location;
        });
        
        const data = locations.map(loc => loc.response_time || 0);
        const colors = data.map(time => {
            if (time < 500) return '#10B981'; // green
            if (time < 1000) return '#F59E0B'; // yellow
            return '#EF4444'; // red
        });
        
        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [{
                    label: '–ß–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (–º—Å)',
                    data: data,
                    backgroundColor: colors,
                    borderColor: colors,
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: '–ú—ñ–ª–ª—ñ—Å–µ–∫—É–Ω–¥–∏'
                        }
                    }
                },
                plugins: {
                    legend: {
                        display: false
                    }
                }
            }
        });
    }
    
    renderSimpleChart(locations) {
        const chart = document.getElementById('responseChart');
        if (!chart) return;
        
        const maxTime = Math.max(...locations.map(l => l.response_time || 0));
        
        let html = '<div class="simple-chart">';
        locations.forEach(loc => {
            const location = this.locations.find(l => l.code === loc.location);
            const name = location ? location.name : loc.location;
            const time = loc.response_time || 0;
            const percentage = maxTime > 0 ? (time / maxTime) * 100 : 0;
            const color = time < 500 ? '#10B981' : time < 1000 ? '#F59E0B' : '#EF4444';
            
            html += `
                <div class="chart-bar" style="margin-bottom: 10px;">
                    <div style="display: flex; justify-content: space-between; margin-bottom: 5px;">
                        <span>${name}</span>
                        <span>${time} –º—Å</span>
                    </div>
                    <div style="background: #e5e7eb; height: 20px; border-radius: 10px;">
                        <div style="background: ${color}; height: 100%; width: ${percentage}%; border-radius: 10px; transition: width 0.5s ease;"></div>
                    </div>
                </div>
            `;
        });
        html += '</div>';
        
        chart.outerHTML = html;
    }
    
    createResultsContainer() {
        if (this.resultsSection) {
            this.resultsSection.style.display = 'block';
            return;
        }
        
        const container = document.createElement('section');
        container.id = 'resultsSection';
        container.className = 'results-section';
        container.innerHTML = `
            <div class="container">
                <div class="text-center mb-4">
                    <h2 class="display-5 fw-bold">–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏</h2>
                </div>
                <div id="resultsContainer" class="results-grid"></div>
            </div>
        `;
        
        // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ —Ñ–æ—Ä–º—ã
        const form = this.form.closest('section');
        form.parentNode.insertBefore(container, form.nextSibling);
        
        this.resultsSection = container;
        this.resultsContainer = document.getElementById('resultsContainer');
    }
    
    showLoading() {
        this.disableSubmit('–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ...');
        
        if (!this.loadingDiv) {
            this.loadingDiv = document.createElement('div');
            this.loadingDiv.className = 'loading';
            this.loadingDiv.innerHTML = `
                <div class="spinner"></div>
                <span>–í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∞–π—Ç—É...</span>
            `;
            this.form.appendChild(this.loadingDiv);
        }
        
        this.loadingDiv.style.display = 'flex';
    }
    
    hideLoading() {
        this.enableSubmit();
        if (this.loadingDiv) {
            this.loadingDiv.style.display = 'none';
        }
    }
    
    showResults() {
        if (this.resultsSection) {
            this.resultsSection.style.display = 'block';
            this.resultsSection.scrollIntoView({ 
                behavior: 'smooth', 
                block: 'start' 
            });
        }
    }
    
    disableSubmit(text = '–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏') {
        if (this.submitBtn) {
            this.submitBtn.disabled = true;
            this.submitBtn.textContent = text;
        }
    }
    
    enableSubmit() {
        if (this.submitBtn) {
            this.submitBtn.disabled = false;
            this.submitBtn.textContent = '–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏';
        }
    }
    
    showError(message) {
        this.showNotification(message, 'error');
    }
    
    showWarning(message) {
        this.showNotification(message, 'warning');
    }
    
    showSuccess(message) {
        this.showNotification(message, 'success');
    }
    
    showNotification(message, type = 'info') {
        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notification = document.createElement('div');
        notification.className = `notification alert alert-${type === 'error' ? 'danger' : type} alert-dismissible fade show`;
        notification.innerHTML = `
            <i class="bi bi-${this.getNotificationIcon(type)} me-2"></i>
            ${message}
            <button type="button" class="btn-close" onclick="this.parentElement.remove()"></button>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.body.insertBefore(notification, document.body.firstChild);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (notification.parentElement) {
                notification.remove();
            }
        }, 5000);
    }
    
    getNotificationIcon(type) {
        const icons = {
            success: 'check-circle',
            error: 'exclamation-triangle',
            warning: 'exclamation-triangle',
            info: 'info-circle'
        };
        return icons[type] || 'info-circle';
    }
    
    getStatusClass(statusCode) {
        if (!statusCode) return 'error';
        if (statusCode >= 200 && statusCode < 300) return 'success';
        if (statusCode >= 300 && statusCode < 400) return 'warning';
        return 'error';
    }
    
    getResponseTimeClass(responseTime) {
        if (!responseTime) return 'error';
        if (responseTime < 500) return 'success';
        if (responseTime < 1000) return 'warning';
        return 'error';
    }
    
    getSSLExpiryClass(daysUntilExpiry) {
        if (daysUntilExpiry < 0) return 'error';
        if (daysUntilExpiry < 30) return 'warning';
        return 'success';
    }
    
    formatBytes(bytes) {
        if (!bytes) return '0 B';
        const k = 1024;
        const sizes = ['B', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }
    
    formatDate(dateString) {
        if (!dateString) return '–ù–µ–≤—ñ–¥–æ–º–æ';
        const date = new Date(dateString);
        return date.toLocaleDateString('uk-UA');
    }
    
    formatDateTime(dateString) {
        if (!dateString) return new Date().toLocaleString('uk-UA');
        const date = new Date(dateString);
        return date.toLocaleString('uk-UA');
    }
    
    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
    
    copyApiCode() {
        const codeElement = document.querySelector('.code-example pre code');
        if (!codeElement) return;
        
        const text = codeElement.textContent;
        
        if (navigator.clipboard) {
            navigator.clipboard.writeText(text).then(() => {
                this.showSuccess('–ö–æ–¥ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É');
            }).catch(() => {
                this.fallbackCopyTextToClipboard(text);
            });
        } else {
            this.fallbackCopyTextToClipboard(text);
        }
    }
    
    fallbackCopyTextToClipboard(text) {
        const textArea = document.createElement('textarea');
        textArea.value = text;
        textArea.style.top = '0';
        textArea.style.left = '0';
        textArea.style.position = 'fixed';
        
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();
        
        try {
            document.execCommand('copy');
            this.showSuccess('–ö–æ–¥ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É');
        } catch (err) {
            this.showError('–ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –∫–æ–¥—É');
        }
        
        document.body.removeChild(textArea);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ site-check
    if (document.getElementById('siteCheckForm')) {
        window.siteChecker = new SiteChecker();
    }
});

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
function copyCode() {
    if (window.siteChecker) {
        window.siteChecker.copyApiCode();
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = SiteChecker;
}